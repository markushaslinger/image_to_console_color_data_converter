<MudFileUpload T="IBrowserFile" FilesChanged="HandleFileChanged" Accept=".png,.jpg"
               @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
    <ButtonTemplate>
        <MudFab HtmlTag="label"
                Color="Color.Primary"
                Icon="@Icons.Material.Filled.Image"
                Label="Load image (.jpg, .png)"
                for="@context"/>
    </ButtonTemplate>
</MudFileUpload>

@code {

        private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private static readonly string[] allowedExtensions = { ".jpg", ".png" };
    private const int MaxFileSize = 1024 * 1024 * 25; // 25MB

    [Parameter]
    public EventCallback<Image<Rgba32>> ImageUploaded { get; set; }

    private async Task HandleFileChanged(IBrowserFile file)
    {
        if (!allowedExtensions.Any(ext => file.Name.EndsWith(ext)))
        {
            return;
        }
        await using var stream = file.OpenReadStream(MaxFileSize);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        var imageDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
        var base64Data = imageDataUrl.Split(',').Last();
        var imageData = Convert.FromBase64String(base64Data);

        var image = Image.Load<Rgba32>(imageData);
        await ImageUploaded.InvokeAsync(image);
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }

}